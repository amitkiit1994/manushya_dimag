"""add rate_limits table and fix event_metadata

Revision ID: ae073a147d44
Revises: 006
Create Date: 2025-07-05 22:36:49.911702

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = 'ae073a147d44'
down_revision = '006'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('rate_limits',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('client_key', sa.String(length=255), nullable=False),
    sa.Column('endpoint', sa.String(length=100), nullable=False),
    sa.Column('window_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('request_count', sa.Integer(), nullable=False),
    sa.Column('last_request_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_rate_limits_client_endpoint_window', 'rate_limits', ['client_key', 'endpoint', 'window_start'], unique=False)
    op.create_index('idx_rate_limits_window_start', 'rate_limits', ['window_start'], unique=False)
    op.create_index(op.f('ix_rate_limits_client_key'), 'rate_limits', ['client_key'], unique=False)
    op.create_index(op.f('ix_rate_limits_endpoint'), 'rate_limits', ['endpoint'], unique=False)
    op.create_index(op.f('ix_rate_limits_window_start'), 'rate_limits', ['window_start'], unique=False)
    op.create_table('identity_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('identity_id', sa.UUID(), nullable=True),
    sa.Column('actor_id', sa.UUID(), nullable=True),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('event_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_delivered', sa.Boolean(), nullable=False),
    sa.Column('delivery_attempts', sa.Integer(), nullable=False),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['identities.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['identity_id'], ['identities.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_identity_events_delivered', 'identity_events', ['is_delivered'], unique=False)
    op.create_index('idx_identity_events_identity_type', 'identity_events', ['identity_id', 'event_type'], unique=False)
    op.create_index('idx_identity_events_type_created', 'identity_events', ['event_type', 'created_at'], unique=False)
    op.create_index(op.f('ix_identity_events_actor_id'), 'identity_events', ['actor_id'], unique=False)
    op.create_index(op.f('ix_identity_events_created_at'), 'identity_events', ['created_at'], unique=False)
    op.create_index(op.f('ix_identity_events_event_type'), 'identity_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_identity_events_identity_id'), 'identity_events', ['identity_id'], unique=False)
    op.create_table('invitations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=100), nullable=False),
    sa.Column('claims', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('invited_by', sa.UUID(), nullable=True),
    sa.Column('is_accepted', sa.Boolean(), nullable=False),
    sa.Column('accepted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['invited_by'], ['identities.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_invitations_accepted', 'invitations', ['is_accepted'], unique=False)
    op.create_index('idx_invitations_email_tenant', 'invitations', ['email', 'tenant_id'], unique=False)
    op.create_index('idx_invitations_expires_at', 'invitations', ['expires_at'], unique=False)
    op.create_index('idx_invitations_token', 'invitations', ['token'], unique=False)
    op.create_index(op.f('ix_invitations_email'), 'invitations', ['email'], unique=False)
    op.create_index(op.f('ix_invitations_invited_by'), 'invitations', ['invited_by'], unique=False)
    op.create_index(op.f('ix_invitations_token'), 'invitations', ['token'], unique=True)
    op.drop_index(op.f('idx_external_identities_identity_id'), table_name='external_identities')
    op.drop_index(op.f('idx_external_identities_provider'), table_name='external_identities')
    op.drop_table('external_identities')
    op.drop_index(op.f('idx_identity_invites_email'), table_name='identity_invites')
    op.drop_index(op.f('idx_identity_invites_expires_at'), table_name='identity_invites')
    op.drop_index(op.f('idx_identity_invites_tenant_id'), table_name='identity_invites')
    op.drop_index(op.f('idx_identity_invites_token'), table_name='identity_invites')
    op.drop_table('identity_invites')
    op.add_column('api_keys', sa.Column('key_hash', sa.String(length=255), nullable=False))
    op.add_column('api_keys', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('api_keys', sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('api_keys', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('api_keys', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.drop_index(op.f('idx_api_keys_identity_id'), table_name='api_keys')
    op.drop_index(op.f('idx_api_keys_tenant_id'), table_name='api_keys')
    op.drop_index(op.f('idx_api_keys_token_hash'), table_name='api_keys')
    op.create_index('idx_api_keys_identity_active', 'api_keys', ['identity_id', 'is_active'], unique=False)
    op.create_index('idx_api_keys_last_used', 'api_keys', ['last_used_at'], unique=False)
    op.create_index(op.f('ix_api_keys_identity_id'), 'api_keys', ['identity_id'], unique=False)
    op.create_index(op.f('ix_api_keys_key_hash'), 'api_keys', ['key_hash'], unique=True)
    op.drop_constraint(op.f('api_keys_tenant_id_fkey'), 'api_keys', type_='foreignkey')
    op.drop_column('api_keys', 'revoked_at')
    op.drop_column('api_keys', 'token_hash')
    op.drop_index(op.f('idx_audit_logs_tenant_id'), table_name='audit_logs')
    op.drop_constraint(op.f('fk_audit_logs_tenant_id'), 'audit_logs', type_='foreignkey')
    op.drop_index(op.f('idx_identities_tenant_id'), table_name='identities')
    op.drop_constraint(op.f('fk_identities_tenant_id'), 'identities', type_='foreignkey')
    op.drop_index(op.f('idx_memories_tenant_id'), table_name='memories')
    op.drop_constraint(op.f('fk_memories_tenant_id'), 'memories', type_='foreignkey')
    op.drop_index(op.f('idx_policies_tenant_id'), table_name='policies')
    op.drop_constraint(op.f('fk_policies_tenant_id'), 'policies', type_='foreignkey')
    op.add_column('sessions', sa.Column('refresh_token_hash', sa.String(length=255), nullable=False))
    op.add_column('sessions', sa.Column('device_info', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('sessions', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('sessions', sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('sessions', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('sessions', sa.Column('tenant_id', sa.UUID(), nullable=True))
    op.drop_index(op.f('idx_sessions_identity_id'), table_name='sessions')
    op.drop_index(op.f('idx_sessions_refresh_token'), table_name='sessions')
    op.drop_index(op.f('idx_sessions_revoked_at'), table_name='sessions')
    op.create_index('idx_sessions_identity_active', 'sessions', ['identity_id', 'is_active'], unique=False)
    op.create_index('idx_sessions_last_used', 'sessions', ['last_used_at'], unique=False)
    op.create_index(op.f('ix_sessions_identity_id'), 'sessions', ['identity_id'], unique=False)
    op.create_index(op.f('ix_sessions_refresh_token_hash'), 'sessions', ['refresh_token_hash'], unique=True)
    op.drop_column('sessions', 'revoked_at')
    op.drop_column('sessions', 'refresh_token')
    op.alter_column('tenants', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.drop_index(op.f('idx_tenants_name'), table_name='tenants')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_tenants_name'), 'tenants', ['name'], unique=False)
    op.alter_column('tenants', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('sessions', sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('sessions', sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_sessions_refresh_token_hash'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_identity_id'), table_name='sessions')
    op.drop_index('idx_sessions_last_used', table_name='sessions')
    op.drop_index('idx_sessions_identity_active', table_name='sessions')
    op.create_index(op.f('idx_sessions_revoked_at'), 'sessions', ['revoked_at'], unique=False)
    op.create_index(op.f('idx_sessions_refresh_token'), 'sessions', ['refresh_token'], unique=False)
    op.create_index(op.f('idx_sessions_identity_id'), 'sessions', ['identity_id'], unique=False)
    op.drop_column('sessions', 'tenant_id')
    op.drop_column('sessions', 'updated_at')
    op.drop_column('sessions', 'last_used_at')
    op.drop_column('sessions', 'is_active')
    op.drop_column('sessions', 'device_info')
    op.drop_column('sessions', 'refresh_token_hash')
    op.create_foreign_key(op.f('fk_policies_tenant_id'), 'policies', 'tenants', ['tenant_id'], ['id'], ondelete='SET NULL')
    op.create_index(op.f('idx_policies_tenant_id'), 'policies', ['tenant_id'], unique=False)
    op.create_foreign_key(op.f('fk_memories_tenant_id'), 'memories', 'tenants', ['tenant_id'], ['id'], ondelete='SET NULL')
    op.create_index(op.f('idx_memories_tenant_id'), 'memories', ['tenant_id'], unique=False)
    op.create_foreign_key(op.f('fk_identities_tenant_id'), 'identities', 'tenants', ['tenant_id'], ['id'], ondelete='SET NULL')
    op.create_index(op.f('idx_identities_tenant_id'), 'identities', ['tenant_id'], unique=False)
    op.create_foreign_key(op.f('fk_audit_logs_tenant_id'), 'audit_logs', 'tenants', ['tenant_id'], ['id'], ondelete='SET NULL')
    op.create_index(op.f('idx_audit_logs_tenant_id'), 'audit_logs', ['tenant_id'], unique=False)
    op.add_column('api_keys', sa.Column('token_hash', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('api_keys', sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('api_keys_tenant_id_fkey'), 'api_keys', 'tenants', ['tenant_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_api_keys_key_hash'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_identity_id'), table_name='api_keys')
    op.drop_index('idx_api_keys_last_used', table_name='api_keys')
    op.drop_index('idx_api_keys_identity_active', table_name='api_keys')
    op.create_index(op.f('idx_api_keys_token_hash'), 'api_keys', ['token_hash'], unique=False)
    op.create_index(op.f('idx_api_keys_tenant_id'), 'api_keys', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_api_keys_identity_id'), 'api_keys', ['identity_id'], unique=False)
    op.alter_column('api_keys', 'name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('api_keys', 'updated_at')
    op.drop_column('api_keys', 'last_used_at')
    op.drop_column('api_keys', 'is_active')
    op.drop_column('api_keys', 'key_hash')
    op.create_table('identity_invites',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('identity_invites_tenant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('identity_invites_pkey'))
    )
    op.create_index(op.f('idx_identity_invites_token'), 'identity_invites', ['token'], unique=False)
    op.create_index(op.f('idx_identity_invites_tenant_id'), 'identity_invites', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_identity_invites_expires_at'), 'identity_invites', ['expires_at'], unique=False)
    op.create_index(op.f('idx_identity_invites_email'), 'identity_invites', ['email'], unique=False)
    op.create_table('external_identities',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('external_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('identity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['identity_id'], ['identities.id'], name=op.f('external_identities_identity_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('external_identities_pkey')),
    sa.UniqueConstraint('provider', 'external_id', name=op.f('uq_external_identities_provider_external_id'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_external_identities_provider'), 'external_identities', ['provider'], unique=False)
    op.create_index(op.f('idx_external_identities_identity_id'), 'external_identities', ['identity_id'], unique=False)
    op.drop_index(op.f('ix_invitations_token'), table_name='invitations')
    op.drop_index(op.f('ix_invitations_invited_by'), table_name='invitations')
    op.drop_index(op.f('ix_invitations_email'), table_name='invitations')
    op.drop_index('idx_invitations_token', table_name='invitations')
    op.drop_index('idx_invitations_expires_at', table_name='invitations')
    op.drop_index('idx_invitations_email_tenant', table_name='invitations')
    op.drop_index('idx_invitations_accepted', table_name='invitations')
    op.drop_table('invitations')
    op.drop_index(op.f('ix_identity_events_identity_id'), table_name='identity_events')
    op.drop_index(op.f('ix_identity_events_event_type'), table_name='identity_events')
    op.drop_index(op.f('ix_identity_events_created_at'), table_name='identity_events')
    op.drop_index(op.f('ix_identity_events_actor_id'), table_name='identity_events')
    op.drop_index('idx_identity_events_type_created', table_name='identity_events')
    op.drop_index('idx_identity_events_identity_type', table_name='identity_events')
    op.drop_index('idx_identity_events_delivered', table_name='identity_events')
    op.drop_table('identity_events')
    op.drop_index(op.f('ix_rate_limits_window_start'), table_name='rate_limits')
    op.drop_index(op.f('ix_rate_limits_endpoint'), table_name='rate_limits')
    op.drop_index(op.f('ix_rate_limits_client_key'), table_name='rate_limits')
    op.drop_index('idx_rate_limits_window_start', table_name='rate_limits')
    op.drop_index('idx_rate_limits_client_endpoint_window', table_name='rate_limits')
    op.drop_table('rate_limits')
    # ### end Alembic commands ###
